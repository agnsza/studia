System kontroli wersji- to oprogramowanie s³u¿¹ce do œledzenia zmian g³ównie w kodzie Ÿród³owym oraz pomocy programistom
 w ³¹czeniu zmian dokonanych przez wiele osób w ró¿nych momentach.
Systemy kontroli wersji dzielone s¹ wg :
-architektury oprogramowania
-licencji oprogramowania
-sposobu oceny zamian
Systemy kontroli wersji dziel¹ siê na:
-scentralizowane, oparte na architekturze klient-serwer (np. CVS, Subversion)
-rozproszone, oparte na architekturze P2P (np. BitKeeper, Git).

Jak wygl¹da typowy "workflow"- posiadatrzy stany plików i odpowiada¹ce im sekcje projektu
-sekcja modified(zmodyfikowany) -> working directory(katalog roboczy)
-sekcja staged(w przechowalni) -> staging area(przechowalnia)-to jest plik(umireszczonyw  katalogu .git) zawieraj¹cy 
informacje o zmianach, które zostan¹ zatwierdzone nastêpn¹ operacjê commit
-sekcja commited(zatwierdzony) -> repository(repozytorium)-repozytorium znajduje siê w katalogu .git
Typowy sposób pracy wygl¹da nastêpuj¹co:
1. Pliki towrzymy i modyfikujemy w katalogu roboczym.
2. Jeœli chcemy, by zmiany zosta³y uwzglêdnione, pliki przenosimy do przechowalni.
3. Gdy chcemy zachowaæ bie¿¹cy stan projektu w repozytorium, zatwierdzamy zmiany. 

Czym ró¿ni scentralizowany i rozproszony system kontroli wersji-
Rozproszony – nie jest wymagany ci¹g³y dostêp do centralnego repozytorium.
Nadaje siê do ma³ych i du¿ych projektów. Œwietnie sprawdza siê te¿ lokalnie.
Scentralizowany-istnieje jedno centralne repozytorium synchronizuj¹ swoje zmiany. 

Polecenia:
GIT init-s³u¿y do zainicjalizowania pustego repozytorium. Dziêki temu zostanie stworzony 
ukryty folder o nazwie .git, zaiweraj¹cy ca³¹ historiê zmian projektu,
GIT add-dodaje zmienione pliki do wirtualnej listy, które za chwilê zapiszemy u¿ywaj¹c polecenia commit. 
GIT status-To polecenie wyœwietli aktualny status pracy nad projektem. Dziêki niemu zobaczysz które pliki by³y
modyfikowane, ale nie zosta³y jeszcze zapisane poleceniem commit. Jeœli nie masz nic nowego, dostaniesz 
komunikat nothing to commit (working directory clean). Jeœli natomiast pliki ulegn¹ zmianie 
od poprzedniego u¿ycia commit, zostanie wyœwietlone odpowiednie podsumowanie.
GIT branch-dzia³, sekcja, ga³¹Ÿ kodu
GIT checkout-Dziêki checkout mo¿emy prze³¹czaæ siê pomiêdzy ró¿nymi ga³êziami kodu w naszym projekcie
(utworzonymi za pomoc¹ polecenia branch)
GIT merge-³¹czy dwie ga³êzie rozwi¹zuj¹c proste konflikty. 
GIT log-s³u¿y nam do przejrzenia historii zmian dokonanych w projekcie. Na liœcie wypisane s¹ szczegó³owe
informacje odnoœnie poszczególnych etapów, ga³êzi, modyfikacji plików. Tutaj mo¿emy sprawdziæ jak rozwija³ siê 
nasz projekt.
GIT reset-polecenie s³u¿y do usuniêcia pliku z poczekalni
GIT diff-narzêdzie to pozwala porównaæ ze sob¹ pliki, commity i branche.
GIT stash-Wykonanie tej operacji zachowa nasze dotychczasowe zmiany gdzieœ na boku, 
a master tree przywróci do stanu HEAD.
GIT pull-pobiera dane z serwera na bazie którego oryginalnie stworzy³eœ swoje repozytorium i próbuje 
automatycznie scaliæ zmiany z kodem roboczym nad którym aktualnie, lokalnie pracujesz.
GIT push-wypchniêcie danych na zewn¹trz
GIT clone-pozwala uzyskaæ kopiê isstniej¹cego ju¿ GIT'a